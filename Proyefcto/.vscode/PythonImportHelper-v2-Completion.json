[
    {
        "label": "Empleados",
        "importPath": "moduloEmpleados.gestionEmpleados",
        "description": "moduloEmpleados.gestionEmpleados",
        "isExtraImport": true,
        "detail": "moduloEmpleados.gestionEmpleados",
        "documentation": {}
    },
    {
        "label": "Empleados",
        "importPath": "moduloEmpleados.gestionEmpleados",
        "description": "moduloEmpleados.gestionEmpleados",
        "isExtraImport": true,
        "detail": "moduloEmpleados.gestionEmpleados",
        "documentation": {}
    },
    {
        "label": "Empleados",
        "importPath": "moduloEmpleados.gestionEmpleados",
        "description": "moduloEmpleados.gestionEmpleados",
        "isExtraImport": true,
        "detail": "moduloEmpleados.gestionEmpleados",
        "documentation": {}
    },
    {
        "label": "utility.utility",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utility.utility",
        "description": "utility.utility",
        "detail": "utility.utility",
        "documentation": {}
    },
    {
        "label": "Contrato",
        "importPath": "moduloEmpleados.contrato",
        "description": "moduloEmpleados.contrato",
        "isExtraImport": true,
        "detail": "moduloEmpleados.contrato",
        "documentation": {}
    },
    {
        "label": "utility",
        "importPath": "utility",
        "description": "utility",
        "isExtraImport": true,
        "detail": "utility",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "menu_gestion_empleados",
        "importPath": "menu_gestion_empleados",
        "description": "menu_gestion_empleados",
        "isExtraImport": true,
        "detail": "menu_gestion_empleados",
        "documentation": {}
    },
    {
        "label": "Asistencia",
        "importPath": "menu_gestion_asistencia",
        "description": "menu_gestion_asistencia",
        "isExtraImport": true,
        "detail": "menu_gestion_asistencia",
        "documentation": {}
    },
    {
        "label": "menu_asistencia",
        "importPath": "menu_gestion_asistencia",
        "description": "menu_gestion_asistencia",
        "isExtraImport": true,
        "detail": "menu_gestion_asistencia",
        "documentation": {}
    },
    {
        "label": "Empleado",
        "importPath": "moduloEmpleados.empleado",
        "description": "moduloEmpleados.empleado",
        "isExtraImport": true,
        "detail": "moduloEmpleados.empleado",
        "documentation": {}
    },
    {
        "label": "Empleado",
        "importPath": "moduloEmpleados.empleado",
        "description": "moduloEmpleados.empleado",
        "isExtraImport": true,
        "detail": "moduloEmpleados.empleado",
        "documentation": {}
    },
    {
        "label": "Asistencia",
        "kind": 6,
        "importPath": "moduloAsistencia.asistencia",
        "description": "moduloAsistencia.asistencia",
        "peekOfCode": "class Asistencia:\n    def __init__(self, empleados: Empleados):\n        self.empleados = empleados\n        self.asistencias = {}  # Estructura: {idlegajo: [estado_del_dia, ...]}\n        self.razones = {}  # Estructura: {idlegajo: {día: razón}}\n    def inicializar_asistencias(self, dias_mes: int):\n        \"\"\"\n        Inicializa las asistencias de todos los empleados a 0 (ausente) para los días del mes.\n        \"\"\"\n        for empleado in self.empleados.employeeslist:",
        "detail": "moduloAsistencia.asistencia",
        "documentation": {}
    },
    {
        "label": "Contrato",
        "kind": 6,
        "importPath": "moduloEmpleados.contrato",
        "description": "moduloEmpleados.contrato",
        "peekOfCode": "class Contrato:\n    def __init__(self, objeto):\n        # No sabía que existía esta función, sirve para obtener un atributo de un objeto enviado.\n        self.nombre = getattr(objeto, \"nombre\")\n        self.fecha = None\n        self.puesto = str\n        self.salario = int\n        self.tipo_contrato = int\n        self.ci = getattr(objeto, \"ci\")\n        self.idlegajo = getattr(objeto, \"idlegajo\")",
        "detail": "moduloEmpleados.contrato",
        "documentation": {}
    },
    {
        "label": "Empleado",
        "kind": 6,
        "importPath": "moduloEmpleados.empleado",
        "description": "moduloEmpleados.empleado",
        "peekOfCode": "class Empleado:\n    # inicializa los legajos en 0\n    legajo = 1\n    # Construye los atributos\n    def __init__(self):\n        # Inicializa los datos del empleado\n        self.nombre = str\n        self.apellido = str\n        self.fecha_nac = None\n        self.direc = str",
        "detail": "moduloEmpleados.empleado",
        "documentation": {}
    },
    {
        "label": "Empleados",
        "kind": 6,
        "importPath": "moduloEmpleados.gestionEmpleados",
        "description": "moduloEmpleados.gestionEmpleados",
        "peekOfCode": "class Empleados:\n    def __init__(self):\n        self.employeeslist = []\n    def añadir_emp(self, entrada: object):\n        self.employeeslist.append(entrada)\n        return \"Nuevo empleado añadido correctamente.\"\n    def listar_emp(self):\n        if self.employeeslist == []:\n            print(\"ERROR: La nómina está vacía\")\n        else:  ",
        "detail": "moduloEmpleados.gestionEmpleados",
        "documentation": {}
    },
    {
        "label": "SistemaAsistencia",
        "kind": 6,
        "importPath": "utility.example",
        "description": "utility.example",
        "peekOfCode": "class SistemaAsistencia:\n    def __init__(self):\n        self.asistencias = {}\n    def inicializar_asistencia(self, id_empleado, dias_del_mes):\n        if id_empleado not in self.asistencias:\n            self.asistencias[id_empleado] = {\n                \"estados\": [0] * dias_del_mes,  # Inicializar días como ausente (0)\n                \"razones\": {}  # Diccionario para razones de permisos y vacaciones\n            }\n        else:",
        "detail": "utility.example",
        "documentation": {}
    },
    {
        "label": "no_input",
        "kind": 2,
        "importPath": "utility.example",
        "description": "utility.example",
        "peekOfCode": "def no_input(self, valor, mensaje):\n    if not valor.strip():\n        print(\"El valor no puede estar vacío. Inténtelo de nuevo.\")\n        # Obtener el nombre del atributo llamador\n        frame = inspect.currentframe().f_back\n        atributo = [name for name, val in frame.f_locals.items() if val is valor][0]\n        # Solicitar nuevamente el input y llamar recursivamente\n        nuevo_valor = input(mensaje)\n        return self.no_input(nuevo_valor, mensaje)\n    return valor",
        "detail": "utility.example",
        "documentation": {}
    },
    {
        "label": "fecha_str",
        "kind": 5,
        "importPath": "utility.example",
        "description": "utility.example",
        "peekOfCode": "fecha_str = \"2024-11-07\"  # ejemplo de cadena de fecha\nformato = \"%Y-%m-%d\"      # formato de la cadena de fecha\nfecha_objeto = datetime.strptime(fecha_str, formato)\nprint(fecha_objeto)\n # función recursiva para verificar que un input no esté vacío\ndef no_input(self, valor, mensaje):\n    if not valor.strip():\n        print(\"El valor no puede estar vacío. Inténtelo de nuevo.\")\n        # Obtener el nombre del atributo llamador\n        frame = inspect.currentframe().f_back",
        "detail": "utility.example",
        "documentation": {}
    },
    {
        "label": "formato",
        "kind": 5,
        "importPath": "utility.example",
        "description": "utility.example",
        "peekOfCode": "formato = \"%Y-%m-%d\"      # formato de la cadena de fecha\nfecha_objeto = datetime.strptime(fecha_str, formato)\nprint(fecha_objeto)\n # función recursiva para verificar que un input no esté vacío\ndef no_input(self, valor, mensaje):\n    if not valor.strip():\n        print(\"El valor no puede estar vacío. Inténtelo de nuevo.\")\n        # Obtener el nombre del atributo llamador\n        frame = inspect.currentframe().f_back\n        atributo = [name for name, val in frame.f_locals.items() if val is valor][0]",
        "detail": "utility.example",
        "documentation": {}
    },
    {
        "label": "fecha_objeto",
        "kind": 5,
        "importPath": "utility.example",
        "description": "utility.example",
        "peekOfCode": "fecha_objeto = datetime.strptime(fecha_str, formato)\nprint(fecha_objeto)\n # función recursiva para verificar que un input no esté vacío\ndef no_input(self, valor, mensaje):\n    if not valor.strip():\n        print(\"El valor no puede estar vacío. Inténtelo de nuevo.\")\n        # Obtener el nombre del atributo llamador\n        frame = inspect.currentframe().f_back\n        atributo = [name for name, val in frame.f_locals.items() if val is valor][0]\n        # Solicitar nuevamente el input y llamar recursivamente",
        "detail": "utility.example",
        "documentation": {}
    },
    {
        "label": "cl",
        "kind": 2,
        "importPath": "utility.utility",
        "description": "utility.utility",
        "peekOfCode": "def cl():\n    os.system('cls')\n# función para esperar a que se ingrese una tecla.\ndef wait():\n    input(\"Presione una tecla para continuar...\")\ndef fecha_formato(mensaje):\n    while True:\n        fecha = input(mensaje)\n        try:\n        # comprueba si la fecha ingresada está en el formato correcto, de no ser así, reiniciará ",
        "detail": "utility.utility",
        "documentation": {}
    },
    {
        "label": "wait",
        "kind": 2,
        "importPath": "utility.utility",
        "description": "utility.utility",
        "peekOfCode": "def wait():\n    input(\"Presione una tecla para continuar...\")\ndef fecha_formato(mensaje):\n    while True:\n        fecha = input(mensaje)\n        try:\n        # comprueba si la fecha ingresada está en el formato correcto, de no ser así, reiniciará \n            fecha = datetime.datetime.strptime(fecha, \"%d/%m/%Y\").date()\n        except:\n            print(\"Formato de fecha incorrecto(Debe ingresar Día/Mes/año. Ejemplo: 24/08/2006)\")",
        "detail": "utility.utility",
        "documentation": {}
    },
    {
        "label": "fecha_formato",
        "kind": 2,
        "importPath": "utility.utility",
        "description": "utility.utility",
        "peekOfCode": "def fecha_formato(mensaje):\n    while True:\n        fecha = input(mensaje)\n        try:\n        # comprueba si la fecha ingresada está en el formato correcto, de no ser así, reiniciará \n            fecha = datetime.datetime.strptime(fecha, \"%d/%m/%Y\").date()\n        except:\n            print(\"Formato de fecha incorrecto(Debe ingresar Día/Mes/año. Ejemplo: 24/08/2006)\")\n        else:\n            return fecha",
        "detail": "utility.utility",
        "documentation": {}
    },
    {
        "label": "no_input",
        "kind": 2,
        "importPath": "utility.utility",
        "description": "utility.utility",
        "peekOfCode": "def no_input(self, valor, mensaje):\n    if not valor.strip():\n        print(\"El valor no puede estar vacío. Inténtelo de nuevo.\")\n        # Obtener el nombre del atributo llamador\n        frame = inspect.currentframe().f_back\n        atributo = [name for name, val in frame.f_locals.items() if val is valor][0]\n        # Solicitar nuevamente el input y llamar recursivamente\n        nuevo_valor = input(mensaje)\n        return self.no_input(nuevo_valor, mensaje)\n    return valor",
        "detail": "utility.utility",
        "documentation": {}
    },
    {
        "label": "dias_del_mes",
        "kind": 2,
        "importPath": "utility.utility",
        "description": "utility.utility",
        "peekOfCode": "def dias_del_mes():\n    # Grupos de meses según su cantidad de días\n    dias_31 = [1, 3, 5, 7, 8, 10, 12]  # Meses con 31 días\n    dias_30 = [4, 6, 9, 11]            # Meses con 30 días\n    while True:\n        try:\n            mes = int(input(\"Ingrese número del mes(Por ejemplo, 1 para enero): \"))\n            if mes in dias_31:\n                return 31\n            elif mes in dias_30:",
        "detail": "utility.utility",
        "documentation": {}
    },
    {
        "label": "pedir_ent",
        "kind": 2,
        "importPath": "utility.utility",
        "description": "utility.utility",
        "peekOfCode": "def pedir_ent(mensaje):\n    while True:\n        try:\n            integer = int(input(mensaje))\n        except ValueError:\n            print(\"ERROR: Debe ingresar un entero\")\n        else:\n            return integer\n# Función que solo permita ingresar determinados tipos de caracteres\ndef pedir_alpha(mensaje):",
        "detail": "utility.utility",
        "documentation": {}
    },
    {
        "label": "pedir_alpha",
        "kind": 2,
        "importPath": "utility.utility",
        "description": "utility.utility",
        "peekOfCode": "def pedir_alpha(mensaje):\n    patron = r\"^[a-zA-Z0-9áéíóúüñàèùçĀāšžÇ'(),.\\-/ ]+$\"  # Definición del patrón\n    while True:\n        try:\n            special = input(mensaje)  # Solicitar entrada al usuario\n            if not re.match(patron, special):  # Verificar si no coincide con el patrón\n                raise ValueError(\"El dato ingresado solo puede contener letras y los siguientes caracteres especiales: ( ), . , - , /\")\n            return special  # Si la entrada es válida, retornarla\n        except ValueError as e:\n            print(e)  # Mostrar el mensaje de error y volver a pedir la entrada",
        "detail": "utility.utility",
        "documentation": {}
    },
    {
        "label": "pedir_str",
        "kind": 2,
        "importPath": "utility.utility",
        "description": "utility.utility",
        "peekOfCode": "def pedir_str(mensaje):\n    while True:\n        string = input(mensaje)\n        # Usamos .isalpha() para verificar si solo tiene letras (sin números o caracteres especiales).\n        # Aceptamos letras con acentos y caracteres especiales como ñ, é, etc.\n        if all(c.isalpha() or c in \"áéíóúüñàèùç\" for c in string):  \n            return string\n        else:\n            print(\"ERROR: Debe ingresar solo caracteres válidos (No se permiten números ni caracteres especiales).\")\nif __name__ == \"__main__\":",
        "detail": "utility.utility",
        "documentation": {}
    },
    {
        "label": "CalculoNomina",
        "kind": 6,
        "importPath": "Calculo de Nomina",
        "description": "Calculo de Nomina",
        "peekOfCode": "class CalculoNomina:\n    def calcular_salario():\n    # Primeramente voy a pedir al usuario todos los datos necesarios para\n    # un calculo de nomina dirigido a individuo, con la posibilidad de cambiar cada aspecto variablle del salario\n    # Como el sistema se basa en calcular el salario por horas trabajadas, vamos a pedir esos datos primero en primera instancia\n      salarioPorHora = int(input(\"Ingrese el salario fijo por hora: \"))\n      horasTrabajadas = int(input(\"Ingrese las horas trabajadas: \"))\n          ## abel: yo solicitaré estos datos previamente, por lo tanto te los enviaré después\n    # Uno de los requisitos es que el programa admita la posibilidad de que el individuo\n    # tenga comision y calcular el porcentaje de ganancia en base a su productividad",
        "detail": "Calculo de Nomina",
        "documentation": {}
    },
    {
        "label": "menu_principal",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def menu_principal():\n    while True:\n        utl.cl()\n        print(\"\\nMenú Principal\")\n        print(\"1- Gestión de Empleados\")\n        print(\"2- Gestión de Asistencia\")\n        print(\"3- Salir\")\n        try:\n            op = int(input(\"Ingrese su opción: \"))\n            if op == 1:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "gestion_empleados",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "gestion_empleados = Empleados()\n# Crear una instancia única de Asistencia\ngestion_asistencia = Asistencia(gestion_empleados)\ndef menu_principal():\n    while True:\n        utl.cl()\n        print(\"\\nMenú Principal\")\n        print(\"1- Gestión de Empleados\")\n        print(\"2- Gestión de Asistencia\")\n        print(\"3- Salir\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "gestion_asistencia",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "gestion_asistencia = Asistencia(gestion_empleados)\ndef menu_principal():\n    while True:\n        utl.cl()\n        print(\"\\nMenú Principal\")\n        print(\"1- Gestión de Empleados\")\n        print(\"2- Gestión de Asistencia\")\n        print(\"3- Salir\")\n        try:\n            op = int(input(\"Ingrese su opción: \"))",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Asistencia",
        "kind": 6,
        "importPath": "menu_gestion_asistencia",
        "description": "menu_gestion_asistencia",
        "peekOfCode": "class Asistencia:\n    def __init__(self, empleados):\n        self.empleados = empleados\n        self.asistencia = {}\n    def inicializar_asistencia(self):\n        dias = 30  # Por ejemplo, 30 días\n        for emp in self.empleados.employeeslist:\n            self.asistencia[emp.idlegajo] = [0] * dias\n        print(\"Asistencia inicializada correctamente.\")\n    def registrar_asistencia(self):",
        "detail": "menu_gestion_asistencia",
        "documentation": {}
    },
    {
        "label": "menu_asistencia",
        "kind": 2,
        "importPath": "menu_gestion_asistencia",
        "description": "menu_gestion_asistencia",
        "peekOfCode": "def menu_asistencia(asistencia):\n    while True:\n        print(\"\\nMenú de Gestión de Asistencia\")\n        print(\"1- Inicializar Asistencia\")\n        print(\"2- Registrar Asistencia\")\n        print(\"3- Mostrar Asistencia\")\n        print(\"4- Salir\")\n        try:\n            op = int(input(\"Ingrese su opción: \"))\n            if op == 1:",
        "detail": "menu_gestion_asistencia",
        "documentation": {}
    },
    {
        "label": "menu_gestion_empleados",
        "kind": 2,
        "importPath": "menu_gestion_empleados",
        "description": "menu_gestion_empleados",
        "peekOfCode": "def menu_gestion_empleados(empleados):\n    while True:\n        utl.cl() \n        print(\"\\nMenú de Gestión de Empleados\")\n        print(\"1- Agregar Empleado\")\n        print(\"2- Mostrar Empleados\")\n        print(\"3- Actualizar datos de un empleado\")\n        print(\"4- Eliminar un empleado\")\n        print(\"5- Salir\")\n        try:",
        "detail": "menu_gestion_empleados",
        "documentation": {}
    },
    {
        "label": "menu_gestion_empleados",
        "kind": 2,
        "importPath": "[Deprecated]menu_empleados",
        "description": "[Deprecated]menu_empleados",
        "peekOfCode": "def menu_gestion_empleados():\n    utl.cl()\n    print(\"Menú del empleado. ¿Qué desea hacer?.\\n\"\n          \"1- Registrar un empleado.\\n\"\n          \"2- Actualizar datos de un empleado.\\n\"\n          \"3- Listar nómina de empleados.\\n\"\n          \"4- Eliminar un empleado.\\n\"\n          \"5- Atrás.\\n\")\n    opcion_gestion()\n# parte lógica del menú de gestión de empleados",
        "detail": "[Deprecated]menu_empleados",
        "documentation": {}
    },
    {
        "label": "opcion_gestion",
        "kind": 2,
        "importPath": "[Deprecated]menu_empleados",
        "description": "[Deprecated]menu_empleados",
        "peekOfCode": "def opcion_gestion():\n    try:\n        op = int(input(\"Ingrese su opción: \"))\n        if op == 1:\n            # Opción 1: Registrar empleado\n            emp = Empleado()\n            ne.añadir_emp(emp)\n        elif op == 2:\n            # Opción 2: Actualizar datos de un empleado\n            ne.actualizar_emp()",
        "detail": "[Deprecated]menu_empleados",
        "documentation": {}
    },
    {
        "label": "ne",
        "kind": 5,
        "importPath": "[Deprecated]menu_empleados",
        "description": "[Deprecated]menu_empleados",
        "peekOfCode": "ne = Empleados()\n# menú que gestionará todo lo relacionado a la gestion de empleados\ndef menu_gestion_empleados():\n    utl.cl()\n    print(\"Menú del empleado. ¿Qué desea hacer?.\\n\"\n          \"1- Registrar un empleado.\\n\"\n          \"2- Actualizar datos de un empleado.\\n\"\n          \"3- Listar nómina de empleados.\\n\"\n          \"4- Eliminar un empleado.\\n\"\n          \"5- Atrás.\\n\")",
        "detail": "[Deprecated]menu_empleados",
        "documentation": {}
    }
]